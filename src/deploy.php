<?php

declare(strict_types=1);
error_reporting(E_ALL);
ini_set('display_errors', '1');
set_error_handler(function (int $errno, string $errstr, string $errfile = null, int $errline = null, array $errcontext = null): bool {
    if (!(error_reporting() & $errno)) {
        // This error code is not included in error_reporting
        return false;
    }
    throw new ErrorException($errstr, 0, $errno, $errfile, $errline);
});
if (PHP_MAJOR_VERSION < 8) {
    die("This script requires PHP 8 or newer.");
}
/**
 * better version of shell_exec(),
 * supporting both stdin and stdout and stderr and os-level return code
 *
 * @param string $cmd
 *            command to execute
 * @param string $stdin
 *            (optional) data to send to stdin, binary data is supported.
 * @param string $stdout
 *            (optional) stdout data generated by cmd
 * @param string $stderr
 *            (optional) stderr data generated by cmd
 * @param bool $print_std
 *            (optional, default false) if you want stdout+stderr to be printed while it's running,
 *            set this to true. (useful for long-running commands)
 * @return int
 */
function hhb_exec(string $cmd, string $stdin = "", string &$stdout = null, string &$stderr = null, bool $print_std = false): int
{
    $stdouth = tmpfile();
    $stderrh = tmpfile();
    $descriptorspec = array(
        0 => array(
            "pipe",
            "rb"
        ), // stdin
        1 => array(
            "file",
            stream_get_meta_data($stdouth)['uri'],
            'ab'
        ),
        2 => array(
            "file",
            stream_get_meta_data($stderrh)['uri'],
            'ab'
        )
    );
    $pipes = array();
    $proc = proc_open($cmd, $descriptorspec, $pipes);
    while (strlen($stdin) > 0) {
        $written_now = fwrite($pipes[0], $stdin);
        if ($written_now < 1 || $written_now === strlen($stdin)) {
            // ... can add more error checking here
            break;
        }
        $stdin = substr($stdin, $written_now);
    }
    fclose($pipes[0]);
    unset($stdin, $pipes[0]);
    if (!$print_std) {
        $proc_ret = proc_close($proc); // this line will stall until the process has exited.
        $stdout = stream_get_contents($stdouth);
        $stderr = stream_get_contents($stderrh);
    } else {
        $stdout = "";
        $stderr = "";
        stream_set_blocking($stdouth, false);
        stream_set_blocking($stderrh, false);
        $fetchstd = function () use (&$stdout, &$stderr, &$stdouth, &$stderrh): bool {
            $ret = false;
            $tmp =  stream_get_contents($stdouth); // fread($stdouth, 1); //
            if (is_string($tmp) && strlen($tmp) > 0) {
                $ret = true;
                $stdout .= $tmp;
                fwrite(STDOUT, $tmp);
            }
            $tmp = stream_get_contents($stderrh); // fread($stderrh, 1); //
            // var_dump($tmp);
            if (is_string($tmp) && strlen($tmp) > 0) {
                $ret = true;
                $stderr .= $tmp;
                fwrite(STDERR, $tmp);
            }
            return $ret;
        };
        while (($status = proc_get_status($proc))["running"]) {
            if (!$fetchstd()) {
                // 100 ms
                usleep(100 * 1000);
            }
        }
        $proc_ret = $status["exitcode"];
        proc_close($proc);
        $fetchstd();
    }
    fclose($stdouth);
    fclose($stderrh);
    return $proc_ret;
}
function exec2(string $cmd): void
{
    echo "executing: {$cmd}\n";
    $ret = null;
    passthru($cmd, $ret);
    if ($ret !== 0) {
        if (!str_starts_with($cmd, 'killall')) {
            throw new \Exception("command '{$cmd}' failed with exit code {$ret}\n");
        }
    }
}
class C
{
    private const MYSQL_USERNAME = 'sqllolteknet';
    private const MYSQL_PASSWORD = 'sqllolteknet';
    private const MYSQL_DATABASE = 'sqllolteknet';
    private const MYSQL_HOSTNAME = 'sql.loltek.net';
    private const MYSQL_SOCKET = '/home/sqllolteknet/mysql/mysql.sock';
    private const MYSQL_PORT = 62761;
    function __construct()
    {
        if (trim(file_get_contents('/etc/machine-id')) !== 'e2f2cb962c1c41a6b921650cdcdd5992') {
            die('running on wrong system?');
        }
        if (trim(shell_exec("whoami")) !== 'sqllolteknet') {
            die('wrong username?');
        }
    }
    public function installMysql()
    {
        $mysql_url = 'https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.34-linux-glibc2.17-x86_64-minimal.tar.xz';
        chdir('/home/sqllolteknet');
        if (trim((string)shell_exec('screen -ls | grep mysqld_screen_session')) !== '') {
            // enter: ^M
            // press ctrl+c to exit screen session
            exec2('screen -S mysqld_screen_session -X stuff "^C^M"');
            exec2('screen -S mysqld_screen_session -X stuff "^C^M"');
            exec2('screen -S mysqld_screen_session -X stuff "exit^M"');
            exec2('screen -S mysqld_screen_session -X quit');
            sleep(5);
        }
        exec2("killall -w -g mysqld");
        exec2("rm -rfv /home/sqllolteknet/mysql");
        mkdir('/home/sqllolteknet/mysql/datadir', 0755, true);
        chdir('/home/sqllolteknet/mysql');
        exec2('wget ' . escapeshellarg($mysql_url) . ' -O mysql_minimal.tar.xz');
        exec2('tar -xvf mysql_minimal.tar.xz');
        unlink('mysql_minimal.tar.xz');
        $dirname = glob('mysql*')[0];
        rename($dirname, 'mysql_install_dir');
        chdir('mysql_install_dir');
        $my_cnf = <<<EOT
[mysqld]
datadir=/home/sqllolteknet/mysql/datadir
socket=%MYSQL_SOCKET%
port=%MYSQL_PORT%
max_connections = 20
disable-log-bin = 1
skip-name-resolve = 1
performance-schema = 0
mysqlx = 0
max_allowed_packet = 50M
innodb_flush_method=nosync
EOT;
        $my_cnf = strtr($my_cnf, [
            '%MYSQL_PORT%' => self::MYSQL_PORT,
            '%MYSQL_SOCKET%' => self::MYSQL_SOCKET
        ]);
        file_put_contents('my.cnf', $my_cnf, LOCK_EX);
        copy(__DIR__ . '/mysql/mysql_restarter_script.php', 'mysql_restarter_script.php');
        copy(__DIR__ . '/mysql/mysql_cronjob_starter.sh', 'mysql_cronjob_starter.sh');
        $crontabLineToInstall = '@reboot /home/sqllolteknet/mysql/mysql_restarter_script.php';
        $currentCrontab = (string)shell_exec('crontab -l');
        if (!str_contains($currentCrontab, $crontabLineToInstall)) {
            $currentCrontab = trim($currentCrontab) . "\n" . $crontabLineToInstall . "\n";
            file_put_contents('crontab.txt', $currentCrontab, LOCK_EX);
            exec2('crontab crontab.txt');
            unlink('crontab.txt');
        }
        exec2('./bin/mysqld --defaults-file=my.cnf --initialize-insecure');
        exec2('bash ./mysql_cronjob_starter.sh');
        $getConnection = function (): \PDO {
            $pdo = new PDO("mysql:unix_socket=" . self::MYSQL_SOCKET, 'root', '', array(
                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC
            ));
            return $pdo;
        };
        $maxAttempts = 10;
        echo "waiting for mysql to start";
        for ($i = 0;; ++$i) {
            echo ".";
            try {
                $pdo = $getConnection();
                break;
            } catch (\Throwable $e) {
                if ($i >= $maxAttempts) {
                    throw $e;
                }
                sleep(1);
            }
        }
        $sql = function (string $sql) use ($pdo) {
            echo "executing sql: {$sql}\n";
            $pdo->exec($sql);
        };
        echo " mysql started\n";
        assert($pdo instanceof \PDO);
        $root_password = bin2hex(random_bytes(10));
        file_put_contents('/home/sqllolteknet/mysql/root_password.txt', $root_password, LOCK_EX);
        $sql("ALTER USER 'root'@'localhost' IDENTIFIED BY " . $pdo->quote($root_password));
        $sql("CREATE USER " . $pdo->quote(self::MYSQL_USERNAME) . "@'%' IDENTIFIED BY " . $pdo->quote(self::MYSQL_PASSWORD));
        $sql("CREATE DATABASE `" . self::MYSQL_DATABASE . "`");
        //$sql("GRANT ALL PRIVILEGES ON " . $pdo->quote(self::MYSQL_DATABASE) . ".* TO " . $pdo->quote(self::MYSQL_USERNAME) . "@'%'");
        // ...
        $sql("GRANT ALL PRIVILEGES ON *.* TO " . $pdo->quote(self::MYSQL_USERNAME) . "@'%' WITH GRANT OPTION");
        $sql("FLUSH PRIVILEGES");
    }
    public function installWebsite()
    {
        chdir('/home/sqllolteknet/websites/sql.loltek.net/www');
        exec2('rm -rfv *');
        //        exec2("rsync -aP " . escapeshellarg(__DIR__ . '/sql.loltek.net/www/') . " .");
        $indexSource = file_get_contents(__DIR__ . '/sql.loltek.net/www/index.php');
        $indexSource = strtr($indexSource, [
            '%MYSQL_PORT%' => self::MYSQL_PORT,
            '%MYSQL_HOSTNAME%' => SELF::MYSQL_HOSTNAME,
            '%MYSQL_SOCKET%' => self::MYSQL_SOCKET,
            '%MYSQL_USERNAME%' => self::MYSQL_USERNAME,
            '%MYSQL_PASSWORD%' => self::MYSQL_PASSWORD,
            '%MYSQL_DATABASE%' => self::MYSQL_DATABASE
        ]);
        file_put_contents('index.php', $indexSource, LOCK_EX);
        mkdir("mysql", 0755, true);
        chdir("mysql");
        exec2("wget 'https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-english.tar.xz' -O phpMyAdmin.tar.xz");
        exec2("tar -xvf phpMyAdmin.tar.xz");
        unlink("phpMyAdmin.tar.xz");
        $dirname = glob('phpMyAdmin*')[0];
        rename($dirname, 'phpmyadmin');
        chdir('phpmyadmin');
        $phpmyadminConfigSource = file_get_contents(__DIR__ . '/mysql/phpmyadmin/config.inc.php');
        $phpmyadminConfigSource = strtr($phpmyadminConfigSource, [
            '%MYSQL_PORT%' => self::MYSQL_PORT,
            '%MYSQL_HOSTNAME%' => SELF::MYSQL_HOSTNAME,
            '%MYSQL_SOCKET%' => self::MYSQL_SOCKET,
            '%MYSQL_USERNAME%' => self::MYSQL_USERNAME,
            '%MYSQL_PASSWORD%' => self::MYSQL_PASSWORD,
            '%MYSQL_DATABASE%' => self::MYSQL_DATABASE
        ]);
        file_put_contents('config.inc.php', $phpmyadminConfigSource, LOCK_EX);
    }
}
$install_mysql = 1;
$install_website = 1;
$o = new C();
if ($install_website) {
    echo "installing website\n";
    $o->installWebsite();
    echo "website installed\n";
}
if ($install_mysql) {
    echo "installing mysql\n";
    $o->installMysql();
    echo "mysql installed\n";
}
